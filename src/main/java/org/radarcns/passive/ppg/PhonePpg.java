/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.passive.ppg;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** PPG collected using a phone camera. This ranges over a sample of the image in a camera preview. */
@org.apache.avro.specific.AvroGenerated
public class PhonePpg extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1112527455334205736L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PhonePpg\",\"namespace\":\"org.radarcns.passive.ppg\",\"doc\":\"PPG collected using a phone camera. This ranges over a sample of the image in a camera preview.\",\"fields\":[{\"name\":\"time\",\"type\":\"double\",\"doc\":\"Phone time since the Unix Epoch (seconds).\"},{\"name\":\"timeReceived\",\"type\":\"double\",\"doc\":\"Processed time since the Unix Epoch (seconds).\"},{\"name\":\"sampleSize\",\"type\":\"int\",\"doc\":\"Number of pixels that were evaluated to get the current value.\"},{\"name\":\"red\",\"type\":\"float\",\"doc\":\"Red component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).\"},{\"name\":\"green\",\"type\":\"float\",\"doc\":\"Green component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).\"},{\"name\":\"blue\",\"type\":\"float\",\"doc\":\"Blue component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PhonePpg> ENCODER =
      new BinaryMessageEncoder<PhonePpg>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PhonePpg> DECODER =
      new BinaryMessageDecoder<PhonePpg>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PhonePpg> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PhonePpg> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PhonePpg>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PhonePpg to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PhonePpg from a ByteBuffer. */
  public static PhonePpg fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Phone time since the Unix Epoch (seconds). */
  @Deprecated public double time;
  /** Processed time since the Unix Epoch (seconds). */
  @Deprecated public double timeReceived;
  /** Number of pixels that were evaluated to get the current value. */
  @Deprecated public int sampleSize;
  /** Red component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation). */
  @Deprecated public float red;
  /** Green component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation). */
  @Deprecated public float green;
  /** Blue component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation). */
  @Deprecated public float blue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PhonePpg() {}

  /**
   * All-args constructor.
   * @param time Phone time since the Unix Epoch (seconds).
   * @param timeReceived Processed time since the Unix Epoch (seconds).
   * @param sampleSize Number of pixels that were evaluated to get the current value.
   * @param red Red component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
   * @param green Green component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
   * @param blue Blue component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
   */
  public PhonePpg(java.lang.Double time, java.lang.Double timeReceived, java.lang.Integer sampleSize, java.lang.Float red, java.lang.Float green, java.lang.Float blue) {
    this.time = time;
    this.timeReceived = timeReceived;
    this.sampleSize = sampleSize;
    this.red = red;
    this.green = green;
    this.blue = blue;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return timeReceived;
    case 2: return sampleSize;
    case 3: return red;
    case 4: return green;
    case 5: return blue;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.Double)value$; break;
    case 1: timeReceived = (java.lang.Double)value$; break;
    case 2: sampleSize = (java.lang.Integer)value$; break;
    case 3: red = (java.lang.Float)value$; break;
    case 4: green = (java.lang.Float)value$; break;
    case 5: blue = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return Phone time since the Unix Epoch (seconds).
   */
  public java.lang.Double getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * Phone time since the Unix Epoch (seconds).
   * @param value the value to set.
   */
  public void setTime(java.lang.Double value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'timeReceived' field.
   * @return Processed time since the Unix Epoch (seconds).
   */
  public java.lang.Double getTimeReceived() {
    return timeReceived;
  }

  /**
   * Sets the value of the 'timeReceived' field.
   * Processed time since the Unix Epoch (seconds).
   * @param value the value to set.
   */
  public void setTimeReceived(java.lang.Double value) {
    this.timeReceived = value;
  }

  /**
   * Gets the value of the 'sampleSize' field.
   * @return Number of pixels that were evaluated to get the current value.
   */
  public java.lang.Integer getSampleSize() {
    return sampleSize;
  }

  /**
   * Sets the value of the 'sampleSize' field.
   * Number of pixels that were evaluated to get the current value.
   * @param value the value to set.
   */
  public void setSampleSize(java.lang.Integer value) {
    this.sampleSize = value;
  }

  /**
   * Gets the value of the 'red' field.
   * @return Red component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
   */
  public java.lang.Float getRed() {
    return red;
  }

  /**
   * Sets the value of the 'red' field.
   * Red component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
   * @param value the value to set.
   */
  public void setRed(java.lang.Float value) {
    this.red = value;
  }

  /**
   * Gets the value of the 'green' field.
   * @return Green component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
   */
  public java.lang.Float getGreen() {
    return green;
  }

  /**
   * Sets the value of the 'green' field.
   * Green component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
   * @param value the value to set.
   */
  public void setGreen(java.lang.Float value) {
    this.green = value;
  }

  /**
   * Gets the value of the 'blue' field.
   * @return Blue component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
   */
  public java.lang.Float getBlue() {
    return blue;
  }

  /**
   * Sets the value of the 'blue' field.
   * Blue component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
   * @param value the value to set.
   */
  public void setBlue(java.lang.Float value) {
    this.blue = value;
  }

  /**
   * Creates a new PhonePpg RecordBuilder.
   * @return A new PhonePpg RecordBuilder
   */
  public static org.radarcns.passive.ppg.PhonePpg.Builder newBuilder() {
    return new org.radarcns.passive.ppg.PhonePpg.Builder();
  }

  /**
   * Creates a new PhonePpg RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PhonePpg RecordBuilder
   */
  public static org.radarcns.passive.ppg.PhonePpg.Builder newBuilder(org.radarcns.passive.ppg.PhonePpg.Builder other) {
    return new org.radarcns.passive.ppg.PhonePpg.Builder(other);
  }

  /**
   * Creates a new PhonePpg RecordBuilder by copying an existing PhonePpg instance.
   * @param other The existing instance to copy.
   * @return A new PhonePpg RecordBuilder
   */
  public static org.radarcns.passive.ppg.PhonePpg.Builder newBuilder(org.radarcns.passive.ppg.PhonePpg other) {
    return new org.radarcns.passive.ppg.PhonePpg.Builder(other);
  }

  /**
   * RecordBuilder for PhonePpg instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PhonePpg>
    implements org.apache.avro.data.RecordBuilder<PhonePpg> {

    /** Phone time since the Unix Epoch (seconds). */
    private double time;
    /** Processed time since the Unix Epoch (seconds). */
    private double timeReceived;
    /** Number of pixels that were evaluated to get the current value. */
    private int sampleSize;
    /** Red component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation). */
    private float red;
    /** Green component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation). */
    private float green;
    /** Blue component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation). */
    private float blue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.passive.ppg.PhonePpg.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sampleSize)) {
        this.sampleSize = data().deepCopy(fields()[2].schema(), other.sampleSize);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.red)) {
        this.red = data().deepCopy(fields()[3].schema(), other.red);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.green)) {
        this.green = data().deepCopy(fields()[4].schema(), other.green);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.blue)) {
        this.blue = data().deepCopy(fields()[5].schema(), other.blue);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PhonePpg instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.passive.ppg.PhonePpg other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sampleSize)) {
        this.sampleSize = data().deepCopy(fields()[2].schema(), other.sampleSize);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.red)) {
        this.red = data().deepCopy(fields()[3].schema(), other.red);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.green)) {
        this.green = data().deepCopy(fields()[4].schema(), other.green);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.blue)) {
        this.blue = data().deepCopy(fields()[5].schema(), other.blue);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * Phone time since the Unix Epoch (seconds).
      * @return The value.
      */
    public java.lang.Double getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * Phone time since the Unix Epoch (seconds).
      * @param value The value of 'time'.
      * @return This builder.
      */
    public org.radarcns.passive.ppg.PhonePpg.Builder setTime(double value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * Phone time since the Unix Epoch (seconds).
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * Phone time since the Unix Epoch (seconds).
      * @return This builder.
      */
    public org.radarcns.passive.ppg.PhonePpg.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeReceived' field.
      * Processed time since the Unix Epoch (seconds).
      * @return The value.
      */
    public java.lang.Double getTimeReceived() {
      return timeReceived;
    }

    /**
      * Sets the value of the 'timeReceived' field.
      * Processed time since the Unix Epoch (seconds).
      * @param value The value of 'timeReceived'.
      * @return This builder.
      */
    public org.radarcns.passive.ppg.PhonePpg.Builder setTimeReceived(double value) {
      validate(fields()[1], value);
      this.timeReceived = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timeReceived' field has been set.
      * Processed time since the Unix Epoch (seconds).
      * @return True if the 'timeReceived' field has been set, false otherwise.
      */
    public boolean hasTimeReceived() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timeReceived' field.
      * Processed time since the Unix Epoch (seconds).
      * @return This builder.
      */
    public org.radarcns.passive.ppg.PhonePpg.Builder clearTimeReceived() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleSize' field.
      * Number of pixels that were evaluated to get the current value.
      * @return The value.
      */
    public java.lang.Integer getSampleSize() {
      return sampleSize;
    }

    /**
      * Sets the value of the 'sampleSize' field.
      * Number of pixels that were evaluated to get the current value.
      * @param value The value of 'sampleSize'.
      * @return This builder.
      */
    public org.radarcns.passive.ppg.PhonePpg.Builder setSampleSize(int value) {
      validate(fields()[2], value);
      this.sampleSize = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleSize' field has been set.
      * Number of pixels that were evaluated to get the current value.
      * @return True if the 'sampleSize' field has been set, false otherwise.
      */
    public boolean hasSampleSize() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sampleSize' field.
      * Number of pixels that were evaluated to get the current value.
      * @return This builder.
      */
    public org.radarcns.passive.ppg.PhonePpg.Builder clearSampleSize() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'red' field.
      * Red component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
      * @return The value.
      */
    public java.lang.Float getRed() {
      return red;
    }

    /**
      * Sets the value of the 'red' field.
      * Red component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
      * @param value The value of 'red'.
      * @return This builder.
      */
    public org.radarcns.passive.ppg.PhonePpg.Builder setRed(float value) {
      validate(fields()[3], value);
      this.red = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'red' field has been set.
      * Red component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
      * @return True if the 'red' field has been set, false otherwise.
      */
    public boolean hasRed() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'red' field.
      * Red component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
      * @return This builder.
      */
    public org.radarcns.passive.ppg.PhonePpg.Builder clearRed() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'green' field.
      * Green component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
      * @return The value.
      */
    public java.lang.Float getGreen() {
      return green;
    }

    /**
      * Sets the value of the 'green' field.
      * Green component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
      * @param value The value of 'green'.
      * @return This builder.
      */
    public org.radarcns.passive.ppg.PhonePpg.Builder setGreen(float value) {
      validate(fields()[4], value);
      this.green = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'green' field has been set.
      * Green component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
      * @return True if the 'green' field has been set, false otherwise.
      */
    public boolean hasGreen() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'green' field.
      * Green component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
      * @return This builder.
      */
    public org.radarcns.passive.ppg.PhonePpg.Builder clearGreen() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'blue' field.
      * Blue component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
      * @return The value.
      */
    public java.lang.Float getBlue() {
      return blue;
    }

    /**
      * Sets the value of the 'blue' field.
      * Blue component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
      * @param value The value of 'blue'.
      * @return This builder.
      */
    public org.radarcns.passive.ppg.PhonePpg.Builder setBlue(float value) {
      validate(fields()[5], value);
      this.blue = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'blue' field has been set.
      * Blue component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
      * @return True if the 'blue' field has been set, false otherwise.
      */
    public boolean hasBlue() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'blue' field.
      * Blue component detected in a sample of the camera preview. The range is 0 (no saturation) to 1 (full saturation).
      * @return This builder.
      */
    public org.radarcns.passive.ppg.PhonePpg.Builder clearBlue() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PhonePpg build() {
      try {
        PhonePpg record = new PhonePpg();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.Double) defaultValue(fields()[0]);
        record.timeReceived = fieldSetFlags()[1] ? this.timeReceived : (java.lang.Double) defaultValue(fields()[1]);
        record.sampleSize = fieldSetFlags()[2] ? this.sampleSize : (java.lang.Integer) defaultValue(fields()[2]);
        record.red = fieldSetFlags()[3] ? this.red : (java.lang.Float) defaultValue(fields()[3]);
        record.green = fieldSetFlags()[4] ? this.green : (java.lang.Float) defaultValue(fields()[4]);
        record.blue = fieldSetFlags()[5] ? this.blue : (java.lang.Float) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PhonePpg>
    WRITER$ = (org.apache.avro.io.DatumWriter<PhonePpg>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PhonePpg>
    READER$ = (org.apache.avro.io.DatumReader<PhonePpg>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
